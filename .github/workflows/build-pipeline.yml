name: Simple Build Pipeline

on: [push]
env:
  APPLICATION_NAME: testapp
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
  APP_VERSION: 1

jobs:

  # lint:
  #   runs-on: jaf1
  #   container: ubuntu:22.04

  #   steps:
  #   - name: Lint code
  #     run: |
  #       echo "CODE LINTER RUNNING"
    # - uses: actions/checkout@v1
    # - name: Setup Python environment
    #   uses: actions/setup-python@v1.1.1
    # - name: Install requirements
    #   run: pip install --quiet --requirement requirements.txt
    # - name: Lint code
    #   run: |
    #     flake8 --ignore=E501,E231 *.py
    #     pylint --disable=C0301 --disable=C0326 *.py
    # - name: Run unit tests
    #   run: |
    #     python -m unittest --verbose --failfast        

  build_image:
    # needs: [lint]
    runs-on: jaf1
    container: ubuntu:22.04

    steps:
    - uses: actions/checkout@v1
    - name: Build Application
      run: |
        echo "BUILD COMMANDS"
    
    - name: Build and Tag
      run: |
        export IMAGE="${{ env.PROJECT_NAME }}/${{ env.APPLICATION_NAME }}:${{ env.APP_VERSION}}"
        echo "Building $IMAGE"
        # docker build -t $IMAGE  .
      
    - name: Push to image registry
      run: |
        export IMAGE="${{ env.PROJECT_NAME }}/${{ env.APPLICATION_NAME }}:${{ env.APP_VERSION}}"
        echo "Pushing $IMAGE"
        # docker push $IMAGE

  test_image:
    # needs: [build_image]
    runs-on: jaf1
    container: ubuntu:20.04
    steps:
    - name: Test
      run: |
        echo "TEST IMAGE"
        export IMAGE="${{ env.PROJECT_NAME }}/${{ env.APPLICATION_NAME }}:${{ env.APP_VERSION}}"
        echo "TESTING: $IMAGE"
        apt-get update
        
        uname -a
        ls -latr /etc /bin
        cat /etc/os-release

    - name: Setup Trivy
      run: |
        apt-get install wget apt-transport-https gnupg lsb-release -y
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | tee /usr/share/keyrings/trivy.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | tee -a /etc/apt/sources.list.d/trivy.list
        apt-get update
        apt-get install trivy

    - name: Setup Docker 
      run: | 
        apt update
        apt install apt-transport-https ca-certificates curl software-properties-common -y
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
        apt install docker-ce -y

    - name: Pull Image
      run: |
        export DOCKER_IMAGE="python:3.4-alpine"
        docker pull $DOCKER_IMAGE

    - name: Scan Image
      run: |
        export DOCKER_IMAGE="python:3.4-alpine"
        trivy image $DOCKER_IMAGE

        trivy image -f json -o /tmp/results.json $DOCKER_IMAGE 
        ls -latr /tmp

    - name: Upload Findings
      uses: actions/upload-artifact@v3
      with:
        name: vulnerabilities
        path: /tmp/*.json


  # deploy:
  #   needs: [test_image]
  #   runs-on: ubuntu-latest
  #   runs-on: jaf1
  #   container: ubuntu:22.04
  #   steps:
  #   - name: Test deployment
  #     run: |
  #       export IMAGE="${{ env.PROJECT_NAME }}/${{ env.APPLICATION_NAME }}:${{ env.APP_VERSION}}"
  #       echo "Deploy code"