name: Simple Build Pipeline

on: [push]
env:
  APPLICATION_NAME: testapp
  PROJECT_NAME: ${{ secrets.PROJECT_NAME }}
  APP_VERSION: 1

jobs:

  lint:
    runs-on: ubuntu-latest
    container: ubuntu:22.04

    steps:
    - name: Lint code
      run: |
        echo "CODE LINTER RUNNING"
    # - uses: actions/checkout@v1
    # - name: Setup Python environment
    #   uses: actions/setup-python@v1.1.1
    # - name: Install requirements
    #   run: pip install --quiet --requirement requirements.txt
    # - name: Lint code
    #   run: |
    #     flake8 --ignore=E501,E231 *.py
    #     pylint --disable=C0301 --disable=C0326 *.py
    # - name: Run unit tests
    #   run: |
    #     python -m unittest --verbose --failfast        

  build_image:
    needs: [lint]
    runs-on: ubuntu-latest
    container: ubuntu:22.04

    steps:
    - uses: actions/checkout@v1
    - name: Build Application
      run: |
        echo "BUILD COMMANDS"
    
    - name: Build and Tag
      run: |
        export IMAGE="${{ env.PROJECT_NAME }}/${{ env.APPLICATION_NAME }}:${{ env.APP_VERSION}}"
        echo "Building $IMAGE"
        # docker build -t $IMAGE  .
      
    - name: Push to image registry
      run: |
        export IMAGE="${{ env.PROJECT_NAME }}/${{ env.APPLICATION_NAME }}:${{ env.APP_VERSION}}"
        echo "Pushing $IMAGE"
        # docker push $IMAGE

  test_image:
    needs: [build_image]
    runs-on: ubuntu-latest
    container: ubuntu:22.04
    steps:
    - name: Test
      run: |
        echo "TEST IMAGE"
        export IMAGE="${{ env.PROJECT_NAME }}/${{ env.APPLICATION_NAME }}:${{ env.APP_VERSION}}"
        echo "TESTING: $IMAGE"
      
  deploy:
    needs: [test_image]
    runs-on: ubuntu-latest
    container: ubuntu:22.04
    steps:
    - name: Test deployment
      run: |
        export IMAGE="${{ env.PROJECT_NAME }}/${{ env.APPLICATION_NAME }}:${{ env.APP_VERSION}}"
        echo "Deploy code"